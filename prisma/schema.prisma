// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl  String?
    firstName String?
    lastName  String?

    emailAddress String @unique

    credits            Int                 @default(150)
    UserToProject      UserToProject[]
    QuestionAsked      Question[]
    StripeTransactions StripeTransaction[]
}

model StripeTransaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    user    User   @relation(fields: [userId], references: [id])
    credits Int
}

model Project {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String
    githubUrl String

    deletedAt           DateTime?
    UserToProject       UserToProject[]
    commits             Commit[]
    SourceCodeEmbedding SourceCodeEmbedding[]
    status              ProjectStatus         @default(PROCESSING)

    savedQuestions Question[]
    meetings       Meeting[]
}

enum ProjectStatus {
    PROCESSING
    COMPLETED
    FAILED
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model SourceCodeEmbedding {
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model Question {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question       String
    answer         String
    fileReferences Json?
    projectId      String
    project        Project @relation(fields: [projectId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Meeting {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    name      String
    project   Project @relation(fields: [projectId], references: [id])

    meetingUrl String //firebase storage url
    status     MeetingStatus @default(PROCESSING)
    Issues     Issue[]
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start String
    end   String

    gist     String
    headline String
    summary  String

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model Commit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime

    //ai summery
    summery String
}
